MINISHELL SYNTAX HANDLING SUMMARY
=================================

This document summarizes all the syntax validation rules and error handling implemented in handle_syntax.c

=== TOKEN TYPES HANDLED ===
1. IN_REDIR (<)
2. OUT_REDIR (>)
3. APPEND (>>)
4. HEREDOC (<<)
5. PIPE (|)
6. AND (&&)
7. OR (||)
8. OP_PAREN (()
9. CL_PAREN ())
10. WORD (commands/arguments)

=== MAIN VALIDATION CATEGORIES ===

1. PARENTHESES VALIDATION
   - Balanced parentheses check (equal number of open/close)
   - Empty parentheses detection: () → error
   - Word before open parenthesis: word( → error
   - Operator before close parenthesis: |) → error  
   - Pipe after open parenthesis: (| → error

2. REDIRECTION VALIDATION
   - All redirections must be followed by a WORD token
   - Missing filename after redirection: > → error
   - Invalid token after redirection: > | → error
   - Applied to: <, >, >>, <<

3. PIPE VALIDATION
   - Pipes cannot be at the beginning: | cmd → error
   - Pipes cannot be at the end: cmd | → error
   - Consecutive pipes not allowed: cmd || cmd → error
   - Pipe followed by redirection: | > file → error

4. LOGICAL OPERATORS VALIDATION (AND/OR)
   - Cannot be at beginning: && cmd → error
   - Cannot be at end: cmd && → error
   - Cannot be consecutive: cmd && || cmd → error
   - Mixed with pipes incorrectly: | && or && | → error

5. MIXED OPERATOR VALIDATION
   - Pipe followed by logical operator: | && → error
   - Logical operator followed by pipe: && | → error

=== SPECIFIC SYNTAX RULES ENFORCED ===

✓ VALID SYNTAX:
- cmd | cmd
- cmd && cmd
- cmd || cmd
- cmd > file
- cmd < file
- cmd >> file
- cmd << delimiter
- (cmd | cmd) && cmd
- cmd | (cmd && cmd)

✗ INVALID SYNTAX:
- | cmd (pipe at start)
- cmd | (pipe at end)
- cmd || cmd (consecutive pipes)
- cmd && | cmd (mixed operators)
- cmd | && cmd (mixed operators)
- () (empty parentheses)
- word( (word before parenthesis)
- | ) (operator before close paren)
- ( | (pipe after open paren)
- cmd > (missing redirection target)
- cmd > | (invalid redirection target)

=== ERROR HANDLING ===

Error Messages Format:
"minishell: syntax error near unexpected token `TOKEN`"

Specific Error Tokens:
- `newline` - for missing tokens at end
- `|` - for pipe errors
- `&&` - for AND operator errors
- `||` - for OR operator errors
- `(` - for open parenthesis errors
- `)` - for close parenthesis errors
- Actual token string for other errors

Exit Status: 2 (standard bash syntax error code)

=== FUNCTION BREAKDOWN ===

Helper Functions:
- is_redirection() - checks if token is redirection type
- is_and_or() - checks if token is logical operator
- print_syntax() - prints standardized error messages

Validation Functions:
- check_paren() - validates parentheses balance
- validate_parentheses() - comprehensive parentheses rules
- check_redirs() - validates redirection syntax
- chec_pipe() - validates pipe syntax
- check_and_or() - validates logical operator syntax
- wach_valid_tokens() - validates mixed operator sequences

Main Functions:
- check_syntax() - initial validation (first token, parentheses balance)
- check_token() - validates individual tokens in sequence
- handle_syntax_errors() - main entry point, orchestrates all validation

=== VALIDATION FLOW ===

1. Check if token list exists
2. Validate overall parentheses balance
3. Check first token is not operator
4. Check initial redirection if present
5. Loop through each token:
   - Validate redirection syntax
   - Validate parentheses rules
   - Validate pipe syntax
   - Validate logical operator syntax
   - Validate mixed operator sequences
6. Return success/failure